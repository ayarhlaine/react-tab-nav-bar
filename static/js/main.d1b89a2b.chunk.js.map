{"version":3,"sources":["NavBar/NavBar.dux.ts","Tabs/Tabs.tsx","changeAdvancedView/changeAdvancedView.ts","ViewSelect/ViewSelect.tsx","NavBar/NavBar.tsx","Page/Page.tsx","Footer/Footer.tsx","App.tsx","serviceWorker.ts","store/index.tsx","index.tsx"],"names":["updateActiveTabAction","activeTab","action","navBarReducer","createReducer","activeView","handleAction","state","payload","connect","appState","navBar","dispatch","actions","bindActionCreators","className","value","indicatorColor","textColor","onChange","_","aria-label","Tab","label","changeAdvancedView","updateActiveViewAction","Select","labelId","id","disableUnderline","MenuProps","MenuListProps","disablePadding","classes","paper","event","target","MenuItem","root","NavBar","useStyles","makeStyles","theme","createStyles","margin","spacing","Paper","elevation","toUpperCase","Footer","href","src","alt","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","configureStore","middleWareEnhancer","applyMiddleware","thunk","createStore","composeWithDevTools","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d1b89a2b.chunk.js","sourcesContent":["import { action, createReducer} from 'typesafe-actions';\nexport const updateActiveTabAction = (activeTab: string) => action('navBar/UPDATE_ACTIVE_TAB', activeTab);\nexport const updateActiveViewAction = (activeView: string) => action('navBar/UPDATE_ACTIVE_VIEW', activeView);\nexport interface NavBarState {\n    activeTab: string;\n    activeView: string;\n}\nconst initialState: NavBarState = {\n    activeTab: 'home',\n    activeView: 'normal',\n};\nexport const navBarReducer = createReducer(initialState)\n.handleAction('navBar/UPDATE_ACTIVE_TAB', (state: NavBarState, action: any) => ({...state, activeTab: action.payload}))\n.handleAction('navBar/UPDATE_ACTIVE_VIEW', (state: NavBarState, action: any) => ({...state, activeView: action.payload}))\n;","import React,{ FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch, bindActionCreators } from 'redux';\nimport { AppState } from '../store';\nimport {Tabs as MaterialTabs} from '@material-ui/core';\nimport Tab from '@material-ui/core/Tab';\nimport { updateActiveTabAction } from '../NavBar/NavBar.dux';\nimport './Tabs.scss';\nexport interface TabsProp {\n  activeTab: string;\n  activeView: string;\n  actions: {\n    updateActiveTabAction: typeof updateActiveTabAction;\n  }\n}\nexport const Tabs:FC<TabsProp> = (\n  {\n    activeTab, activeView, actions,\n  }\n) => {\n  return (\n        <MaterialTabs\n            className={'Tabs'}\n            value={activeTab}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            onChange={(_, activeTab: string) => actions.updateActiveTabAction(activeTab)}\n            aria-label=\"disabled tabs example\"\n        >\n            <Tab label=\"Home\" value={'home'}/>\n            {\n              activeView === 'normal' && \n              <Tab label=\"Projects\" value={'projects'} />\n            }\n            {\n              activeView === 'normal' && \n              <Tab label=\"About\" value={'about'}/>\n            }\n            {\n              activeView === 'advanced' && \n              <Tab label=\"System Setting\" value={'system setting'}/>\n            }\n        </MaterialTabs>\n  );\n}\nconst mapStateToProps = (appState: AppState) => {\n  return {\n    activeTab: appState.navBar.activeTab,\n    activeView: appState.navBar.activeView\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  actions: {\n    ...bindActionCreators({ updateActiveTabAction }, dispatch),\n  }\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Tabs);\n\n","import { Dispatch } from 'redux';\nimport {\n    updateActiveTabAction,\n    updateActiveViewAction,\n} from '../NavBar/NavBar.dux';\nexport const changeAdvancedView = (activeView: string) => (dispatch: Dispatch) => {\n    dispatch(updateActiveTabAction('home'));\n    dispatch(updateActiveViewAction(activeView));\n}","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch, bindActionCreators } from 'redux';\nimport { AppState } from '../store';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport { changeAdvancedView } from '../changeAdvancedView/changeAdvancedView';\nimport './ViewSelect.scss';\nexport interface ViewSelectProp {\n    activeView: string;\n    actions: {\n      changeAdvancedView: typeof changeAdvancedView;\n    }\n}\nexport const ViewSelect: FC<ViewSelectProp> = ({ activeView, actions }) => {\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        actions.changeAdvancedView(event.target.value as string);\n    };\n    return (\n        <div className={'ViewSelect'}>\n             <Select\n             className={'ViewSelect__select'}\n            labelId=\"demo-simple-select-label\"\n            id=\"demo-simple-select\"\n            value={activeView}\n            disableUnderline\n            MenuProps={{MenuListProps: {disablePadding: true}, classes: {paper: 'ViewSelect__dialog'}}}\n            onChange={handleChange}\n            >\n            <MenuItem value={'normal'} classes={{root: 'ViewSelect__MenuItem'}}>Normal</MenuItem>\n            <MenuItem value={'advanced'} classes={{root: 'ViewSelect__MenuItem'}}>Advanced</MenuItem>\n            </Select>\n        </div>\n    )\n}\nexport const mapStateToProps = (appState: AppState) => {\n    return {\n        activeView: appState.navBar.activeView\n    }\n  }\n  \n  const mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: {\n      ...bindActionCreators({ changeAdvancedView }, dispatch),\n    }\n  });\n  \n  export default connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(ViewSelect);","import React,{ FC } from 'react';\nimport Tabs from '../Tabs/Tabs';\nimport ViewSelect from '../ViewSelect/ViewSelect';\nimport './Nav.scss';\nexport const NavBar:FC<{}> = () => {\n  return (\n    <div className=\"Nav\">\n        <div className={'Nav__contents'}>\n            <Tabs />\n            <ViewSelect />\n        </div>\n    </div>\n  );\n}\nexport default NavBar;\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { AppState } from '../store';\nimport Paper from '@material-ui/core/Paper';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\nimport './Page.scss';\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n      },\n    },\n  }),\n);\ninterface PageProp {\n  activeTab: string;\n}\ntype PagePropNull = PageProp | null;\nexport const Page: FC<PagePropNull> = ( { activeTab }) => {\n    const classes = useStyles();\n    return(\n        <div className={classes.root}>\n            <Paper elevation={3}>\n                <div className={'Page__Page'}>{ activeTab.toUpperCase() }</div>\n            </Paper>\n        </div>\n    )\n}\nexport const mapStateToProps = (appState: AppState) => {\n  return {\n    activeTab: appState.navBar.activeTab\n  }\n}\nexport default connect(\n  mapStateToProps,\n  null\n)(Page);","import React, { FC } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\nimport './Footer.scss';\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n      },\n    },\n  }),\n);\nexport const Footer: FC<{}> = ( ) => {\n    const classes = useStyles();\n    return(\n        <div className={classes.root}>\n            <Paper elevation={3}>\n                <div className={'Footer'}>\n                    <div className={'Source'}>\n                        <div className={'left'}>\n                            Source : \n                        </div>\n                        <div className={'Github__Link'}>\n                            <a href='https://github.com/ayarhlaine/react-tab-nav-bar' className={'Source__Link'}>\n                                Github\n                            </a>\n                        </div>\n                    </div>\n                    <div className={'Test'}>\n                        <div className={'left'}>\n                            Tested With : \n                        </div>\n                        <div className={'Tested__With__Jest'}>\n                            <a href='https://github.com/facebook/jest'>\n                                <img src='https://img.shields.io/badge/tested_with-jest-99424f.svg' alt='Tested with Jest' />\n                            </a>\n                        </div>\n                    </div>\n                    <div className={'Status'}>\n                        <div className={'left'}>\n                            Build Status : \n                        </div>\n                        <div className={'Build__Status'}>\n                            <a href='https://travis-ci.com/ayarhlaine/react-tab-nav-bar.svg?branch=master'>\n                                <img src='https://travis-ci.com/ayarhlaine/react-tab-nav-bar.svg?branch=master' alt='Coverage Status' />\n                            </a>\n                        </div>\n                    </div>\n                    <div className={'Coverage'}>\n                        <div className={'left'}>\n                            Coverage : \n                        </div>\n                        <div className={'Covearge__Status'}>\n                            <a href='https://coveralls.io/github/ayarhlaine/react-tab-nav-bar?branch=master'>\n                                <img src='https://coveralls.io/repos/github/ayarhlaine/react-tab-nav-bar/badge.svg?branch=master' alt='Coverage Status' />\n                            </a>\n                        </div>\n                    </div>\n                </div>\n            </Paper>\n        </div>\n    )\n}\nexport default Footer;","import React,{ FC } from 'react';\nimport NavBar from './NavBar/NavBar';\nimport Page from './Page/Page';\nimport Footer from './Footer/Footer';\nexport const App:FC<{}> = () => {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Page />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { applyMiddleware,createStore,combineReducers } from 'redux'\nimport { NavBarState ,navBarReducer } from '../NavBar/NavBar.dux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nexport interface AppState {\n    navBar: NavBarState;\n  }\nconst rootReducer = combineReducers<AppState> ({\n    navBar: navBarReducer\n});\n\nexport const configureStore = () =>{\n    const middleWareEnhancer = applyMiddleware(thunk);\n    const store = createStore(\n        rootReducer,\n        composeWithDevTools(middleWareEnhancer)\n    );\n    return store;\n};\n\nexport default configureStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport configureStore from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <App />\n    </Provider>\n   </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}